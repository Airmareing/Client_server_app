diff -ruN origin/config/config.in my/config/config.in
--- origin/config/config.in	2023-09-28 18:09:27.692793255 +0300
+++ my/config/config.in	2023-09-28 18:03:35.692790272 +0300
@@ -119,6 +119,7 @@
 bool 'tcpdump'			CONFIG_USER_TCPDUMP
 bool 'arpwatch'			CONFIG_USER_ARPWATCH
 bool 'arpscan'			CONFIG_USER_ARPSCAN
+bool 'test1'			CONFIG_USER_TEST1 
 
 if [ "$CONFIG_USER_TCPDUMP" = "y" ] || [ "$CONFIG_USER_ARPWATCH" = "y" ] || [ "CONFIG_USER_ARPSCAN" = "y" ]; then
 	define_bool CONFIG_LIB_PCAP y
diff -ruN origin/configs/all/config-config my/configs/all/config-config
--- origin/configs/all/config-config	2023-09-28 18:09:52.932793469 +0300
+++ my/configs/all/config-config	2023-09-28 18:04:59.832790985 +0300
@@ -125,3 +125,8 @@
 #
 # CONFIG_LIB_SMALLSIZE is not set
 # CONFIG_USER_SMALLSIZE is not set
+
+#
+# Client-server app
+#
+CONFIG_USER_TEST1=y
diff -ruN origin/user/Makefile my/user/Makefile
--- origin/user/Makefile	2023-09-28 18:10:13.302793642 +0300
+++ my/user/Makefile	2023-09-28 18:02:18.912789621 +0300
@@ -142,6 +142,8 @@
 # generate certs for apps
 dir_$(CONFIG_LIB_OPENSSL)		    += certsgen
 
+# client-server
+dir_$(CONFIG_USER_TEST1)        += test1
 
 all:
 	# ">>>>>>>>>>>>>> CONFIGURE AND BUILD USERAPPS  <<<<<<<<<<<<<<<<<<<"
diff -ruN origin/user/test1/Makefile my/user/test1/Makefile
--- origin/user/test1/Makefile	1970-01-01 03:00:00.000000000 +0300
+++ my/user/test1/Makefile	2023-09-28 18:01:21.582789135 +0300
@@ -0,0 +1,13 @@
+CFLAGS  += -ffunction-sections -fdata-sections -fvisibility=hidden
+LDFLAGS += -Wl,--gc-sections
+test1: test1.o
+	$(CC) $(CFLAGS) $(LDFLAGS) $< -o $@
+test1.o: test1.c
+	$(CC) $(CFLAGS) -c $<
+install:
+	echo "Ok.."
+romfs:
+	$(ROMFSINST)  test1 /bin/test1
+	ln -sf /etc/test1 $(ROMFSDIR)/etc/init.d/S99test1
+clean:
+	rm -f *.o test1
diff -ruN origin/user/test1/test1.c my/user/test1/test1.c
--- origin/user/test1/test1.c	1970-01-01 03:00:00.000000000 +0300
+++ my/user/test1/test1.c	2023-09-28 18:01:21.622789135 +0300
@@ -0,0 +1,126 @@
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <string.h>
+#include <stdio.h>
+#include <unistd.h>
+#include <stdlib.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>
+
+#define CLIENT_PORT 35
+#define SERVER_PORT 50
+#define SERVER_IP "192.168.1.10"
+//#define SERVER_LOCAL_IP "127.0.0.1"
+#define MAX_BUFFER_SIZE 1024
+
+int Socket(int domain, int type, int protocol) {
+    int res = socket(domain, type, protocol);
+    if (res == -1) {
+        perror("socket failed");
+        exit(EXIT_FAILURE);
+    }
+    return res;
+}
+
+void Bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen) {
+    int res = bind(sockfd, addr, addrlen);
+    if (res == -1) {
+        perror("bind failed");
+        exit(EXIT_FAILURE);
+    }
+}
+
+void Listen(int sockfd, int backlog) {
+    int res = listen(sockfd, backlog);
+    if (res == -1) {
+        perror("listen failed");
+        exit(EXIT_FAILURE);
+    }
+}
+
+int Accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen) {
+    int res = accept(sockfd, addr, addrlen);
+    if (res == -1) {
+        perror("accept failed");
+        exit(EXIT_FAILURE);
+    }
+    return res;
+}
+
+void Connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen) {
+    int res = connect(sockfd, addr, addrlen);
+    if (res == -1) {
+        perror("connect failed");
+        exit(EXIT_FAILURE);
+    }
+}
+
+void Inet_pton(int af, const char *src, void *dst) {
+    int res = inet_pton(af, src, dst);
+    if (res == 0) {
+        printf("inet_pton failed: src does not contain a character"
+            " string representing a valid network address in the specified"
+            " address family\n");
+        exit(EXIT_FAILURE);
+    }
+    if (res == -1) {
+        perror("inet_pton failed");
+        exit(EXIT_FAILURE);
+    }
+}
+
+int main() {
+    int server = Socket(AF_INET, SOCK_STREAM, 0);
+    struct sockaddr_in adr = {0};
+    adr.sin_family = AF_INET;
+    adr.sin_port = htons(CLIENT_PORT);
+    adr.sin_addr.s_addr = INADDR_ANY;
+
+    Bind(server, (struct sockaddr *) &adr, sizeof adr);
+    Listen(server, 5);
+    
+    FILE *logfile = fopen("test1.log", "a");
+    if (!logfile) {
+        perror("log file open failed");
+        exit(EXIT_FAILURE);
+    }
+
+    while (1) {
+        socklen_t adrlen = sizeof adr;
+        int client = Accept(server, (struct sockaddr *) &adr, &adrlen);
+
+        char buffer[MAX_BUFFER_SIZE];
+        ssize_t nread;
+        
+        int dest = Socket(AF_INET, SOCK_STREAM, 0);
+        struct sockaddr_in d_server = {0};
+        d_server.sin_family = AF_INET;
+        d_server.sin_port = htons(SERVER_PORT);
+        Inet_pton(AF_INET, SERVER_IP, &d_server.sin_addr);
+        Connect(dest, (struct sockaddr *) &d_server, sizeof(d_server));
+
+        while ((nread = read(client, buffer, MAX_BUFFER_SIZE)) > 0) {
+            // модификация и вывод данных
+            char modified_buffer[MAX_BUFFER_SIZE * 2] = {0};
+            sprintf(modified_buffer, "Received [%zd]: <", nread);
+            strcat(modified_buffer, buffer);
+            strcat(modified_buffer, ">");
+            write(STDOUT_FILENO, modified_buffer, strlen(modified_buffer));
+            printf("\n");
+            write(dest, modified_buffer, strlen(modified_buffer));
+
+            // запись лога
+            fprintf(logfile, "%s\n", modified_buffer);
+            fflush(logfile); 
+
+            //очистка массива
+            memset(buffer, 0, sizeof(buffer));
+        }
+
+        close(client);
+    }
+
+    close(server);
+    fclose(logfile);
+    return 0;
+}
